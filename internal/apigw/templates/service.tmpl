
func RegisterGateway{{- .ServerName -}}(s apigw_v1.ServiceRegistrar, srv {{ .ServerName -}}) {
	s.RegisterService(&apigw_desc_{{- .ServerName -}}, srv)
}

var apigw_desc_{{- .ServerName -}} = apigw_v1.ServiceDesc{
	Name: "{{ .FullyQualifiedName -}}",
	HandlerType: (*{{- .ServerName -}})(nil),
	Methods: []*apigw_v1.MethodDesc{
		{{- range .Methods }}
		{
			Name: {{ .FullMethodName -}},
			Method: {{ .HTTPMethod -}},
			Route: "{{- .Route -}}",
			Handler: {{ .MethodHandlerName -}},
			Decoder: {{ .DecoderHandlerName -}},
		},
		{{- end }}
	},
}

{{ range .Methods }}

func {{ .MethodHandlerName -}}(srv interface{}, ctx context.Context, dec func(proto.Message) error, interceptor grpc.UnaryServerInterceptor) (proto.Message, error) {
	in := new({{- .RequestType -}})
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{- .ServerName -}}).{{- .MethodName -}}(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{ .FullMethodName -}},
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{- .ServerName -}}).{{- .MethodName -}}(ctx, req.(*{{- .RequestType -}}))
	}

	rv, err := interceptor(ctx, in, info, handler)
	if err != nil {
		return nil, err
	}
	return rv.(proto.Message), nil
}

func {{ .DecoderHandlerName -}}(ctx context.Context, input apigw_v1.DecoderInput, out proto.Message) error {
	var err error
	_ = err

	{{ if .HasBody }}
		bodyData, err := io.ReadAll(input.Body())
		if err != nil {
			return err
		}
		if len(bodyData) > 0 {
			err = protojson.Unmarshal(bodyData, out)
			if err != nil {
				return status.Errorf(codes.InvalidArgument, "failed to unmarshal body: %s", err)
			}
		}
	{{ end }}

	{{ range .QueryParams }}
		{{.Converter}}

		err = proto.Unmarshal({{.ConverterOutputName}}.Marshal(), out)
		if err != nil {
			return err
		}
	{{ end }}

	{{ range .RouteParams }}
		{{.Converter}}

		err = proto.Unmarshal({{.ConverterOutputName}}.Marshal(), out)
		if err != nil {
			return err
		}
	{{ end }}
	return nil
}
{{ end }}
