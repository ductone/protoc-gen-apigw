// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bookstore/v1/bookstore.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShelfResponseMultiError, or nil if none found.
func (m *DeleteShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShelfResponseMultiError(errors)
	}

	return nil
}

// DeleteShelfResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShelfResponseMultiError) AllErrors() []error { return m }

// DeleteShelfResponseValidationError is the validation error returned by
// DeleteShelfResponse.Validate if the designated constraints aren't met.
type DeleteShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShelfResponseValidationError) ErrorName() string {
	return "DeleteShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShelfResponseValidationError{}

// Validate checks the field values on ListShelvesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShelvesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShelvesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShelvesRequestMultiError, or nil if none found.
func (m *ListShelvesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShelvesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShelvesRequestMultiError(errors)
	}

	return nil
}

// ListShelvesRequestMultiError is an error wrapping multiple validation errors
// returned by ListShelvesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListShelvesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShelvesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShelvesRequestMultiError) AllErrors() []error { return m }

// ListShelvesRequestValidationError is the validation error returned by
// ListShelvesRequest.Validate if the designated constraints aren't met.
type ListShelvesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShelvesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShelvesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShelvesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShelvesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShelvesRequestValidationError) ErrorName() string {
	return "ListShelvesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShelvesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShelvesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShelvesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShelvesRequestValidationError{}

// Validate checks the field values on DeleteBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookResponseMultiError, or nil if none found.
func (m *DeleteBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBookResponseMultiError(errors)
	}

	return nil
}

// DeleteBookResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteBookResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookResponseMultiError) AllErrors() []error { return m }

// DeleteBookResponseValidationError is the validation error returned by
// DeleteBookResponse.Validate if the designated constraints aren't met.
type DeleteBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookResponseValidationError) ErrorName() string {
	return "DeleteBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookResponseValidationError{}

// Validate checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfResponseMultiError, or nil if none found.
func (m *CreateShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShelf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShelfResponseValidationError{
					field:  "Shelf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShelfResponseValidationError{
					field:  "Shelf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShelf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShelfResponseValidationError{
				field:  "Shelf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShelfResponseMultiError(errors)
	}

	return nil
}

// CreateShelfResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfResponseMultiError) AllErrors() []error { return m }

// CreateShelfResponseValidationError is the validation error returned by
// CreateShelfResponse.Validate if the designated constraints aren't met.
type CreateShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfResponseValidationError) ErrorName() string {
	return "CreateShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfResponseValidationError{}

// Validate checks the field values on CreateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookResponseMultiError, or nil if none found.
func (m *CreateBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookResponseMultiError(errors)
	}

	return nil
}

// CreateBookResponseMultiError is an error wrapping multiple validation errors
// returned by CreateBookResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookResponseMultiError) AllErrors() []error { return m }

// CreateBookResponseValidationError is the validation error returned by
// CreateBookResponse.Validate if the designated constraints aren't met.
type CreateBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookResponseValidationError) ErrorName() string {
	return "CreateBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookResponseValidationError{}

// Validate checks the field values on GetBookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookResponseMultiError, or nil if none found.
func (m *GetBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookResponseMultiError(errors)
	}

	return nil
}

// GetBookResponseMultiError is an error wrapping multiple validation errors
// returned by GetBookResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookResponseMultiError) AllErrors() []error { return m }

// GetBookResponseValidationError is the validation error returned by
// GetBookResponse.Validate if the designated constraints aren't met.
type GetBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookResponseValidationError) ErrorName() string { return "GetBookResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookResponseValidationError{}

// Validate checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookResponseMultiError, or nil if none found.
func (m *UpdateBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBookResponseMultiError(errors)
	}

	return nil
}

// UpdateBookResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBookResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookResponseMultiError) AllErrors() []error { return m }

// UpdateBookResponseValidationError is the validation error returned by
// UpdateBookResponse.Validate if the designated constraints aren't met.
type UpdateBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookResponseValidationError) ErrorName() string {
	return "UpdateBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookResponseValidationError{}

// Validate checks the field values on GetAuthorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorResponseMultiError, or nil if none found.
func (m *GetAuthorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthorResponseValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthorResponseValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthorResponseValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Genre.(type) {
	case *GetAuthorResponse_Fiction:
		if v == nil {
			err := GetAuthorResponseValidationError{
				field:  "Genre",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Fiction
	case *GetAuthorResponse_Nonfiction:
		if v == nil {
			err := GetAuthorResponseValidationError{
				field:  "Genre",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Nonfiction
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetAuthorResponseMultiError(errors)
	}

	return nil
}

// GetAuthorResponseMultiError is an error wrapping multiple validation errors
// returned by GetAuthorResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAuthorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorResponseMultiError) AllErrors() []error { return m }

// GetAuthorResponseValidationError is the validation error returned by
// GetAuthorResponse.Validate if the designated constraints aren't met.
type GetAuthorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorResponseValidationError) ErrorName() string {
	return "GetAuthorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorResponseValidationError{}

// Validate checks the field values on Shelf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shelf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shelf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShelfMultiError, or nil if none found.
func (m *Shelf) ValidateAll() error {
	return m.validate(true)
}

func (m *Shelf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Theme

	// no validation rules for SearchDecoded

	// no validation rules for SearchEncoded

	if len(errors) > 0 {
		return ShelfMultiError(errors)
	}

	return nil
}

// ShelfMultiError is an error wrapping multiple validation errors returned by
// Shelf.ValidateAll() if the designated constraints aren't met.
type ShelfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShelfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShelfMultiError) AllErrors() []error { return m }

// ShelfValidationError is the validation error returned by Shelf.Validate if
// the designated constraints aren't met.
type ShelfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShelfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShelfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShelfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShelfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShelfValidationError) ErrorName() string { return "ShelfValidationError" }

// Error satisfies the builtin error interface
func (e ShelfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShelf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShelfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShelfValidationError{}

// Validate checks the field values on Book with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Book) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Book with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookMultiError, or nil if none found.
func (m *Book) ValidateAll() error {
	return m.validate(true)
}

func (m *Book) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Author

	// no validation rules for Title

	// no validation rules for ShelfId

	if len(errors) > 0 {
		return BookMultiError(errors)
	}

	return nil
}

// BookMultiError is an error wrapping multiple validation errors returned by
// Book.ValidateAll() if the designated constraints aren't met.
type BookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookMultiError) AllErrors() []error { return m }

// BookValidationError is the validation error returned by Book.Validate if the
// designated constraints aren't met.
type BookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookValidationError) ErrorName() string { return "BookValidationError" }

// Error satisfies the builtin error interface
func (e BookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookValidationError{}

// Validate checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthorMultiError, or nil if none found.
func (m *Author) ValidateAll() error {
	return m.validate(true)
}

func (m *Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Gender

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorMultiError(errors)
	}

	return nil
}

// AuthorMultiError is an error wrapping multiple validation errors returned by
// Author.ValidateAll() if the designated constraints aren't met.
type AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorMultiError) AllErrors() []error { return m }

// AuthorValidationError is the validation error returned by Author.Validate if
// the designated constraints aren't met.
type AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorValidationError) ErrorName() string { return "AuthorValidationError" }

// Error satisfies the builtin error interface
func (e AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorValidationError{}

// Validate checks the field values on ListShelvesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShelvesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShelvesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShelvesResponseMultiError, or nil if none found.
func (m *ListShelvesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShelvesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShelves() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShelvesResponseValidationError{
						field:  fmt.Sprintf("Shelves[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShelvesResponseValidationError{
						field:  fmt.Sprintf("Shelves[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShelvesResponseValidationError{
					field:  fmt.Sprintf("Shelves[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListShelvesResponseValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListShelvesResponseValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListShelvesResponseValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListShelvesResponseMultiError(errors)
	}

	return nil
}

// ListShelvesResponseMultiError is an error wrapping multiple validation
// errors returned by ListShelvesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListShelvesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShelvesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShelvesResponseMultiError) AllErrors() []error { return m }

// ListShelvesResponseValidationError is the validation error returned by
// ListShelvesResponse.Validate if the designated constraints aren't met.
type ListShelvesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShelvesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShelvesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShelvesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShelvesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShelvesResponseValidationError) ErrorName() string {
	return "ListShelvesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShelvesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShelvesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShelvesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShelvesResponseValidationError{}

// Validate checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShelfRequestMultiError, or nil if none found.
func (m *CreateShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShelf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShelfRequestValidationError{
					field:  "Shelf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShelfRequestValidationError{
					field:  "Shelf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShelf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShelfRequestValidationError{
				field:  "Shelf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShelfRequestMultiError(errors)
	}

	return nil
}

// CreateShelfRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShelfRequestMultiError) AllErrors() []error { return m }

// CreateShelfRequestValidationError is the validation error returned by
// CreateShelfRequest.Validate if the designated constraints aren't met.
type CreateShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShelfRequestValidationError) ErrorName() string {
	return "CreateShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShelfRequestValidationError{}

// Validate checks the field values on GetShelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShelfRequestMultiError, or nil if none found.
func (m *GetShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	if len(errors) > 0 {
		return GetShelfRequestMultiError(errors)
	}

	return nil
}

// GetShelfRequestMultiError is an error wrapping multiple validation errors
// returned by GetShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShelfRequestMultiError) AllErrors() []error { return m }

// GetShelfRequestValidationError is the validation error returned by
// GetShelfRequest.Validate if the designated constraints aren't met.
type GetShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShelfRequestValidationError) ErrorName() string { return "GetShelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShelfRequestValidationError{}

// Validate checks the field values on DeleteShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShelfRequestMultiError, or nil if none found.
func (m *DeleteShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	if len(errors) > 0 {
		return DeleteShelfRequestMultiError(errors)
	}

	return nil
}

// DeleteShelfRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteShelfRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShelfRequestMultiError) AllErrors() []error { return m }

// DeleteShelfRequestValidationError is the validation error returned by
// DeleteShelfRequest.Validate if the designated constraints aren't met.
type DeleteShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShelfRequestValidationError) ErrorName() string {
	return "DeleteShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShelfRequestValidationError{}

// Validate checks the field values on ListBooksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBooksRequestMultiError, or nil if none found.
func (m *ListBooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	if len(errors) > 0 {
		return ListBooksRequestMultiError(errors)
	}

	return nil
}

// ListBooksRequestMultiError is an error wrapping multiple validation errors
// returned by ListBooksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBooksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBooksRequestMultiError) AllErrors() []error { return m }

// ListBooksRequestValidationError is the validation error returned by
// ListBooksRequest.Validate if the designated constraints aren't met.
type ListBooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBooksRequestValidationError) ErrorName() string { return "ListBooksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBooksRequestValidationError{}

// Validate checks the field values on CreateBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookRequestMultiError, or nil if none found.
func (m *CreateBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookRequestValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookRequestMultiError(errors)
	}

	return nil
}

// CreateBookRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBookRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookRequestMultiError) AllErrors() []error { return m }

// CreateBookRequestValidationError is the validation error returned by
// CreateBookRequest.Validate if the designated constraints aren't met.
type CreateBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookRequestValidationError) ErrorName() string {
	return "CreateBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookRequestValidationError{}

// Validate checks the field values on GetBookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBookRequestMultiError,
// or nil if none found.
func (m *GetBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	// no validation rules for Book

	// no validation rules for IncludeAuthor

	if len(errors) > 0 {
		return GetBookRequestMultiError(errors)
	}

	return nil
}

// GetBookRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookRequestMultiError) AllErrors() []error { return m }

// GetBookRequestValidationError is the validation error returned by
// GetBookRequest.Validate if the designated constraints aren't met.
type GetBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookRequestValidationError) ErrorName() string { return "GetBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookRequestValidationError{}

// Validate checks the field values on UpdateBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookRequestMultiError, or nil if none found.
func (m *UpdateBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Shelf

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookRequestValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookRequestValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBookRequestMultiError(errors)
	}

	return nil
}

// UpdateBookRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBookRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookRequestMultiError) AllErrors() []error { return m }

// UpdateBookRequestValidationError is the validation error returned by
// UpdateBookRequest.Validate if the designated constraints aren't met.
type UpdateBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookRequestValidationError) ErrorName() string {
	return "UpdateBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookRequestValidationError{}

// Validate checks the field values on DeleteBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookRequestMultiError, or nil if none found.
func (m *DeleteBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBookRequestValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBookRequestValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBookRequestMultiError(errors)
	}

	return nil
}

// DeleteBookRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBookRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookRequestMultiError) AllErrors() []error { return m }

// DeleteBookRequestValidationError is the validation error returned by
// DeleteBookRequest.Validate if the designated constraints aren't met.
type DeleteBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookRequestValidationError) ErrorName() string {
	return "DeleteBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookRequestValidationError{}

// Validate checks the field values on GetAuthorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorRequestMultiError, or nil if none found.
func (m *GetAuthorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Author

	if len(errors) > 0 {
		return GetAuthorRequestMultiError(errors)
	}

	return nil
}

// GetAuthorRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorRequestMultiError) AllErrors() []error { return m }

// GetAuthorRequestValidationError is the validation error returned by
// GetAuthorRequest.Validate if the designated constraints aren't met.
type GetAuthorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorRequestValidationError) ErrorName() string { return "GetAuthorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorRequestValidationError{}

// Validate checks the field values on ListBooksOnShelfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBooksOnShelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBooksOnShelfRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBooksOnShelfRequestMultiError, or nil if none found.
func (m *ListBooksOnShelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBooksOnShelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListBooksOnShelfRequest_Shelf_Pattern.MatchString(m.GetShelf()) {
		err := ListBooksOnShelfRequestValidationError{
			field:  "Shelf",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 0 || val > 100 {
		err := ListBooksOnShelfRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPageToken()); l < 0 || l > 1024 {
		err := ListBooksOnShelfRequestValidationError{
			field:  "PageToken",
			reason: "value length must be between 0 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExpandMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBooksOnShelfRequestValidationError{
					field:  "ExpandMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBooksOnShelfRequestValidationError{
					field:  "ExpandMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpandMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBooksOnShelfRequestValidationError{
				field:  "ExpandMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListBooksOnShelfRequestMultiError(errors)
	}

	return nil
}

// ListBooksOnShelfRequestMultiError is an error wrapping multiple validation
// errors returned by ListBooksOnShelfRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBooksOnShelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBooksOnShelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBooksOnShelfRequestMultiError) AllErrors() []error { return m }

// ListBooksOnShelfRequestValidationError is the validation error returned by
// ListBooksOnShelfRequest.Validate if the designated constraints aren't met.
type ListBooksOnShelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBooksOnShelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBooksOnShelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBooksOnShelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBooksOnShelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBooksOnShelfRequestValidationError) ErrorName() string {
	return "ListBooksOnShelfRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBooksOnShelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBooksOnShelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBooksOnShelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBooksOnShelfRequestValidationError{}

var _ListBooksOnShelfRequest_Shelf_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on ListBooksOnShelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBooksOnShelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBooksOnShelfResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBooksOnShelfResponseMultiError, or nil if none found.
func (m *ListBooksOnShelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBooksOnShelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBooksOnShelfResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBooksOnShelfResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBooksOnShelfResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExpanded() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBooksOnShelfResponseValidationError{
						field:  fmt.Sprintf("Expanded[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBooksOnShelfResponseValidationError{
						field:  fmt.Sprintf("Expanded[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBooksOnShelfResponseValidationError{
					field:  fmt.Sprintf("Expanded[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBooksOnShelfResponseMultiError(errors)
	}

	return nil
}

// ListBooksOnShelfResponseMultiError is an error wrapping multiple validation
// errors returned by ListBooksOnShelfResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBooksOnShelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBooksOnShelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBooksOnShelfResponseMultiError) AllErrors() []error { return m }

// ListBooksOnShelfResponseValidationError is the validation error returned by
// ListBooksOnShelfResponse.Validate if the designated constraints aren't met.
type ListBooksOnShelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBooksOnShelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBooksOnShelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBooksOnShelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBooksOnShelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBooksOnShelfResponseValidationError) ErrorName() string {
	return "ListBooksOnShelfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBooksOnShelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBooksOnShelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBooksOnShelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBooksOnShelfResponseValidationError{}

// Validate checks the field values on BookExpandMask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookExpandMask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookExpandMask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookExpandMaskMultiError,
// or nil if none found.
func (m *BookExpandMask) ValidateAll() error {
	return m.validate(true)
}

func (m *BookExpandMask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPaths()) > 0 {

		_BookExpandMask_Paths_Unique := make(map[string]struct{}, len(m.GetPaths()))

		for idx, item := range m.GetPaths() {
			_, _ = idx, item

			if _, exists := _BookExpandMask_Paths_Unique[item]; exists {
				err := BookExpandMaskValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_BookExpandMask_Paths_Unique[item] = struct{}{}
			}

			if _, ok := _BookExpandMask_Paths_InLookup[item]; !ok {
				err := BookExpandMaskValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "value must be in list [* author_id genre_id]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return BookExpandMaskMultiError(errors)
	}

	return nil
}

// BookExpandMaskMultiError is an error wrapping multiple validation errors
// returned by BookExpandMask.ValidateAll() if the designated constraints
// aren't met.
type BookExpandMaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookExpandMaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookExpandMaskMultiError) AllErrors() []error { return m }

// BookExpandMaskValidationError is the validation error returned by
// BookExpandMask.Validate if the designated constraints aren't met.
type BookExpandMaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookExpandMaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookExpandMaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookExpandMaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookExpandMaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookExpandMaskValidationError) ErrorName() string { return "BookExpandMaskValidationError" }

// Error satisfies the builtin error interface
func (e BookExpandMaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookExpandMask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookExpandMaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookExpandMaskValidationError{}

var _BookExpandMask_Paths_InLookup = map[string]struct{}{
	"*":         {},
	"author_id": {},
	"genre_id":  {},
}
