syntax = "proto3";

package bookstore.v1;

import "apigw/v1/apigw.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ductone/protoc-gen-apigw/example/bookstore/v1";

// A simple Bookstore API.
//
// The API manages shelves and books resources. Shelves contain books.
service BookstoreService {
  // Returns a list of all shelves in the bookstore.
  rpc ListShelves(ListShelvesRequest) returns (ListShelvesResponse) {
    option (apigw.v1.method).operations = {
      method: "GET"
      route: "/shelves"
    };
  }
  // Creates a new shelf in the bookstore.
  rpc CreateShelf(CreateShelfRequest) returns (CreateShelfResponse) {
    option (apigw.v1.method).operations = {
      method: "POST"
      route: "/shelf"
      summary: "Create a New Shelf"
    };
  }

  // Deletes a shelf, including all books that are stored on the shelf.
  rpc DeleteShelf(DeleteShelfRequest) returns (DeleteShelfResponse) {
    option (apigw.v1.method).operations = {
      method: "DELETE"
      route: "/shelves/{shelf}"
    };
  }

  // Creates a new book.
  rpc CreateBook(CreateBookRequest) returns (CreateBookResponse) {
    option (apigw.v1.method).operations = {
      method: "POST"
      route: "/shelves/{shelf}/books"
      terraform_entity: {
        type: TERRAFORM_ENTITY_METHOD_TYPE_CREATE
        name: "Book"
      }
    };
  }

  // Returns a specific book.
  rpc GetBook(GetBookRequest) returns (GetBookResponse) {
    option (apigw.v1.method).operations = {
      method: "GET"
      route: "/shelves/{shelf}/books/{book}"
      query: [
        {
          key: "author",
          value: "include_author"
        }
      ];
      terraform_entity: {
        type: TERRAFORM_ENTITY_METHOD_TYPE_READ
        name: "Book"
      }
    };
  }
  // Deletes a book from a shelf.
  rpc DeleteBook(DeleteBookRequest) returns (DeleteBookResponse) {
    option (apigw.v1.method).operations = {
      method: "DELETE"
      route: "/shelves/{book.shelf_id}/books/{book.id}"
      terraform_entity: {
        type: TERRAFORM_ENTITY_METHOD_TYPE_DELETE
        name: "Book"
      }
    };
  }

  rpc UpdateBook(UpdateBookRequest) returns (UpdateBookResponse) {
    option (apigw.v1.method).operations = {
      method: "PATCH"
      route: "/shelves/{book.shelf_id}/books/{book.id}"
      terraform_entity: {
        type: TERRAFORM_ENTITY_METHOD_TYPE_UPDATE
        name: "Book"
      }
    };
  }

  // Returns a specific author.
  rpc GetAuthorPerson(GetAuthorPersonRequest) returns (GetAuthorPersonResponse) {
    option (apigw.v1.method).operations = {
      method: "GET"
      route: "/authors/{author}"
    };
  }
}

message DeleteShelfResponse {}

message ListShelvesRequest {}

message DeleteBookResponse {}

message CreateShelfResponse {
  Shelf shelf = 1;
}

message CreateBookResponse {
  Book book = 1;
}

message GetBookResponse {
  Book book = 1;
}

message UpdateBookResponse {
  Book book = 1;
}

message GetAuthorPersonResponse {
  AuthorPerson author = 1;

  oneof genre {
    bool fiction = 2;
    bool nonfiction = 3;
  }
}

// A shelf resource.
message Shelf {
  option (apigw.v1.message).message_options = {
    title: "Bookshelf"
  };
  // A unique shelf id.
  string id = 1;
  // A theme of the shelf (fiction, poetry, etc).
  string theme = 2;

  // To test json name is percentage decoded
  string search_decoded = 3 [json_name = "search[decoded]"];

  // To test json name is percentage encoded
  string search_encoded = 4 [json_name = "search%5Bencoded%5D"];
}

// A book resource.
message Book {
  option (apigw.v1.message).message_options = {
    terraform_entity: {name: "Book"}
  };
  // A unique book id.
  string id = 1 [(apigw.v1.field).field_options = {required_spec: true}];

  // An author of the book.
  string author = 2;
  // A book title.
  string title = 3;
  // Quotes from the book.
  repeated string quotes = 4;
  string shelf_id = 5;
}

// An author resource.
message AuthorPerson {
  // A unique author id.
  int64 id = 1;
  enum Gender {
    GENDER_UNSPECIFIED = 0;
    GENDER_MALE = 1;
    GENDER_FEMALE = 2;
  }
  Gender gender = 2;
  string first_name = 3;
  string last_name = 4 [json_name = "lname"];
  string metadata = 5 [(apigw.v1.field).field_options = {read_only_spec: true}];
  google.protobuf.Timestamp created_at = 6 [(apigw.v1.field).field_options = {read_only_spec: true}];
}

// Response to ListShelves call.
message ListShelvesResponse {
  // Shelves in the bookstore.
  repeated Shelf shelves = 1;
  google.protobuf.FieldMask mask = 2;
}

// Request message for CreateShelf method.
message CreateShelfRequest {
  // The shelf resource to create.
  Shelf shelf = 1;
}

// Request message for GetShelf method.
message GetShelfRequest {
  // The ID of the shelf resource to retrieve.
  string shelf = 1;
}

// Request message for DeleteShelf method.
message DeleteShelfRequest {
  // The ID of the shelf to delete.
  string shelf = 1;
}

// Request message for ListBooks method.
message ListBooksRequest {
  // ID of the shelf which books to list.
  string shelf = 1;
}

// Request message for CreateBook method.
message CreateBookRequest {
  // The ID of the shelf on which to create a book.
  string shelf = 1;
  // A book resource to create on the shelf.
  Book book = 2;
}

// Request message for GetBook method.
message GetBookRequest {
  // The ID of the shelf from which to retrieve a book.
  string shelf = 1;
  // The ID of the book to retrieve.
  int64 book = 2;
  bool include_author = 3;
}

// Request message for UpdateBook method
message UpdateBookRequest {
  // The ID of the shelf from which to retrieve a book.
  string shelf = 1;
  // A book resource to update on the shelf.
  Book book = 2;
}

// Request message for DeleteBook method.
message DeleteBookRequest {
  // The book resource to delete.
  Book book = 1;
}

// Request message for GetAuthorPerson method.
message GetAuthorPersonRequest {
  // The ID of the author resource to retrieve.
  int64 author = 1;
}
