// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bookstore/v1/bookstore.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookstoreService_ListShelves_FullMethodName   = "/bookstore.v1.BookstoreService/ListShelves"
	BookstoreService_CreateShelf_FullMethodName   = "/bookstore.v1.BookstoreService/CreateShelf"
	BookstoreService_DeleteShelf_FullMethodName   = "/bookstore.v1.BookstoreService/DeleteShelf"
	BookstoreService_ListGenres_FullMethodName    = "/bookstore.v1.BookstoreService/ListGenres"
	BookstoreService_CreateGenre_FullMethodName   = "/bookstore.v1.BookstoreService/CreateGenre"
	BookstoreService_GetGenre_FullMethodName      = "/bookstore.v1.BookstoreService/GetGenre"
	BookstoreService_DeleteGenre_FullMethodName   = "/bookstore.v1.BookstoreService/DeleteGenre"
	BookstoreService_CreateBook_FullMethodName    = "/bookstore.v1.BookstoreService/CreateBook"
	BookstoreService_GetBook_FullMethodName       = "/bookstore.v1.BookstoreService/GetBook"
	BookstoreService_DeleteBook_FullMethodName    = "/bookstore.v1.BookstoreService/DeleteBook"
	BookstoreService_UpdateBook_FullMethodName    = "/bookstore.v1.BookstoreService/UpdateBook"
	BookstoreService_GetAuthor_FullMethodName     = "/bookstore.v1.BookstoreService/GetAuthor"
	BookstoreService_RecursiveBook_FullMethodName = "/bookstore.v1.BookstoreService/RecursiveBook"
)

// BookstoreServiceClient is the client API for BookstoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookstoreServiceClient interface {
	// Returns a list of all shelves in the bookstore.
	ListShelves(ctx context.Context, in *ListShelvesRequest, opts ...grpc.CallOption) (*ListShelvesResponse, error)
	// Creates a new shelf in the bookstore.
	CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error)
	// Deletes a shelf, including all books that are stored on the shelf.
	DeleteShelf(ctx context.Context, in *DeleteShelfRequest, opts ...grpc.CallOption) (*DeleteShelfResponse, error)
	// Lists genres
	ListGenres(ctx context.Context, in *ListGenresRequest, opts ...grpc.CallOption) (*ListGenresResponse, error)
	// Creates a new genre in the bookstore.
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error)
	// Get a genre
	GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error)
	// Deletes a genre.
	DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error)
	// Creates a new book.
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	// Returns a specific book.
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	// Deletes a book from a shelf.
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	// Returns a specific author.
	GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error)
	RecursiveBook(ctx context.Context, in *RecursiveBookRequest, opts ...grpc.CallOption) (*RecursiveBookResponse, error)
}

type bookstoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookstoreServiceClient(cc grpc.ClientConnInterface) BookstoreServiceClient {
	return &bookstoreServiceClient{cc}
}

func (c *bookstoreServiceClient) ListShelves(ctx context.Context, in *ListShelvesRequest, opts ...grpc.CallOption) (*ListShelvesResponse, error) {
	out := new(ListShelvesResponse)
	err := c.cc.Invoke(ctx, BookstoreService_ListShelves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error) {
	out := new(CreateShelfResponse)
	err := c.cc.Invoke(ctx, BookstoreService_CreateShelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) DeleteShelf(ctx context.Context, in *DeleteShelfRequest, opts ...grpc.CallOption) (*DeleteShelfResponse, error) {
	out := new(DeleteShelfResponse)
	err := c.cc.Invoke(ctx, BookstoreService_DeleteShelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) ListGenres(ctx context.Context, in *ListGenresRequest, opts ...grpc.CallOption) (*ListGenresResponse, error) {
	out := new(ListGenresResponse)
	err := c.cc.Invoke(ctx, BookstoreService_ListGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error) {
	out := new(CreateGenreResponse)
	err := c.cc.Invoke(ctx, BookstoreService_CreateGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error) {
	out := new(GetGenreResponse)
	err := c.cc.Invoke(ctx, BookstoreService_GetGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error) {
	out := new(DeleteGenreResponse)
	err := c.cc.Invoke(ctx, BookstoreService_DeleteGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, BookstoreService_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, BookstoreService_GetBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*DeleteBookResponse, error) {
	out := new(DeleteBookResponse)
	err := c.cc.Invoke(ctx, BookstoreService_DeleteBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, BookstoreService_UpdateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error) {
	out := new(GetAuthorResponse)
	err := c.cc.Invoke(ctx, BookstoreService_GetAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreServiceClient) RecursiveBook(ctx context.Context, in *RecursiveBookRequest, opts ...grpc.CallOption) (*RecursiveBookResponse, error) {
	out := new(RecursiveBookResponse)
	err := c.cc.Invoke(ctx, BookstoreService_RecursiveBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookstoreServiceServer is the server API for BookstoreService service.
// All implementations must embed UnimplementedBookstoreServiceServer
// for forward compatibility
type BookstoreServiceServer interface {
	// Returns a list of all shelves in the bookstore.
	ListShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error)
	// Creates a new shelf in the bookstore.
	CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error)
	// Deletes a shelf, including all books that are stored on the shelf.
	DeleteShelf(context.Context, *DeleteShelfRequest) (*DeleteShelfResponse, error)
	// Lists genres
	ListGenres(context.Context, *ListGenresRequest) (*ListGenresResponse, error)
	// Creates a new genre in the bookstore.
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error)
	// Get a genre
	GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error)
	// Deletes a genre.
	DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error)
	// Creates a new book.
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	// Returns a specific book.
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	// Deletes a book from a shelf.
	DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error)
	// Returns a specific author.
	GetAuthor(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error)
	RecursiveBook(context.Context, *RecursiveBookRequest) (*RecursiveBookResponse, error)
	mustEmbedUnimplementedBookstoreServiceServer()
}

// UnimplementedBookstoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookstoreServiceServer struct {
}

func (UnimplementedBookstoreServiceServer) ListShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShelves not implemented")
}
func (UnimplementedBookstoreServiceServer) CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShelf not implemented")
}
func (UnimplementedBookstoreServiceServer) DeleteShelf(context.Context, *DeleteShelfRequest) (*DeleteShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShelf not implemented")
}
func (UnimplementedBookstoreServiceServer) ListGenres(context.Context, *ListGenresRequest) (*ListGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenres not implemented")
}
func (UnimplementedBookstoreServiceServer) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedBookstoreServiceServer) GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedBookstoreServiceServer) DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedBookstoreServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookstoreServiceServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookstoreServiceServer) DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookstoreServiceServer) UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookstoreServiceServer) GetAuthor(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookstoreServiceServer) RecursiveBook(context.Context, *RecursiveBookRequest) (*RecursiveBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecursiveBook not implemented")
}
func (UnimplementedBookstoreServiceServer) mustEmbedUnimplementedBookstoreServiceServer() {}

// UnsafeBookstoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookstoreServiceServer will
// result in compilation errors.
type UnsafeBookstoreServiceServer interface {
	mustEmbedUnimplementedBookstoreServiceServer()
}

func RegisterBookstoreServiceServer(s grpc.ServiceRegistrar, srv BookstoreServiceServer) {
	s.RegisterService(&BookstoreService_ServiceDesc, srv)
}

func _BookstoreService_ListShelves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShelvesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).ListShelves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_ListShelves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).ListShelves(ctx, req.(*ListShelvesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_CreateShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).CreateShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_CreateShelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).CreateShelf(ctx, req.(*CreateShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_DeleteShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).DeleteShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_DeleteShelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).DeleteShelf(ctx, req.(*DeleteShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_ListGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).ListGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_ListGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).ListGenres(ctx, req.(*ListGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_GetGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).GetGenre(ctx, req.(*GetGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_DeleteGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).DeleteGenre(ctx, req.(*DeleteGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_GetAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).GetAuthor(ctx, req.(*GetAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreService_RecursiveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecursiveBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServiceServer).RecursiveBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookstoreService_RecursiveBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServiceServer).RecursiveBook(ctx, req.(*RecursiveBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookstoreService_ServiceDesc is the grpc.ServiceDesc for BookstoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookstoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.v1.BookstoreService",
	HandlerType: (*BookstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShelves",
			Handler:    _BookstoreService_ListShelves_Handler,
		},
		{
			MethodName: "CreateShelf",
			Handler:    _BookstoreService_CreateShelf_Handler,
		},
		{
			MethodName: "DeleteShelf",
			Handler:    _BookstoreService_DeleteShelf_Handler,
		},
		{
			MethodName: "ListGenres",
			Handler:    _BookstoreService_ListGenres_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _BookstoreService_CreateGenre_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _BookstoreService_GetGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _BookstoreService_DeleteGenre_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _BookstoreService_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookstoreService_GetBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookstoreService_DeleteBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookstoreService_UpdateBook_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _BookstoreService_GetAuthor_Handler,
		},
		{
			MethodName: "RecursiveBook",
			Handler:    _BookstoreService_RecursiveBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookstore/v1/bookstore.proto",
}
